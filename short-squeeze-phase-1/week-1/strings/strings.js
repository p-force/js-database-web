//Обявление строк с помощью двойных кавычек
const double = "double-quoted";
//одинарных кавычек
const single = 'single-quoted';
//обратных кавычек
const backticks = `backticks`;

//В текст объявленный с помощью обратных кавычек можно вставлять JS выражения
//Объявим переменную сожержащую какое то имя
const someName = 'Anton';
//Затем, мы можем вставить эту переменную в текст приветствия для этого ее необходимо поместить в ${}
const strWithSomeName = `Hello, my name is ${someName}`

//СПЕЦСИМВОЛЫ

//Часто при работе со строками используются спецсимволы
// \n - перенос строки
const str = 'После спецсимвола \n будет осуществлен перенос на новую строку'
// \экранирование\ - Строка в которой уже используются кавычки, все остальные нужно экранировать
const screenStr = "В той строке уже есть \"кавычки\"";
//и т.д

//МЕТОДЫ И СВОЙСТВА СТРОК
screenStr.length //* свойство length возвращает длинну строки
screenStr[0] // получаем значение 0го элемента строки "В"
screenStr[screenStr.length - 1] // получаем последний элемент строки
//!!!! СТРОКИ НЕ ИЗМЕНЯЕМЫ
screenStr[0] = 'Y' // не изменит строку
screenStr.toUpperCase() //изменит все символы букв на заглавные
screenStr.toLowerCase() //изменит все символы букв на строчные


//Регулярные выражения
const phoneNum = "my phone number +79933313345"; //необходимо преобразовать эту строку, записав номер телефона в формате +7(993)331-33-45
const regular = /(.*)(\+7|8)(\d{3})(\d{3})(\d{2})(\d{2})(.*)/ //создаем регулярное выражение 
const result = phoneNum.replace(regular, '$1 $2 ($3) $4-$5-$6'); //используем регулярное выражение совместно с методом replace